$py(

from lib.floo_network import ANVIL_DROP, FlooEvent
from lib.const_ints import CONST_INTS
from lib.scoreboard import OBJECTIVES, TEAMS
from lib.consts import *
from lib.coords import Coords


event = ANVIL_DROP
# regen every 100 ticks, or 5 seconds
# this means 1 heart/10s
floo_event = FlooEvent(event, regen=100)
select_all = event.select_all

select_spawn_coords = Coords("-19 4 85 -12 9 89")
select_spawn = select_spawn_coords.selector()

select_arena_coords = Coords("-33 3 81 -21 13 93")
select_arena = select_arena_coords.selector()


# region coords to be quickly set with redstone and back to stonebrick
# to save the structure blocks for "AD_layer" and "AD_walls"
save_layers = Coords("-57 5 80 -57 4 80")

# Placement of the structure blocks
struct_1 = Coords("-36 15 79")
struct_2 = Coords("-36 14 79")
struct_walls = Coords("-36 13 79")

# Placement of the redstone blocks required to activate
# the structure blocks
layer_1 = Coords("-36 15 80")
layer_2 = Coords("-36 14 80")
layer_walls = Coords("-36 13 80")

door_region = Coords("-20 7 88 -20 5 86")
    
OBJECTIVES.new_str("""
    . _ .

    # used by players to input a new percent for layer 1
    # and layer 2 respectively. The default value is -1, and when
    # a value is detected that is greater than -1, then the percent
    # is changed
    pe1 _ Input Layer 1 %
    pe2 _ Input Layer 2 %
    pe3 _ Input Walls Toggle

    # used by players to input a new time for all layers
    # The default value is -1, and when a value is greater than
    # 0, the time is changed
    iti1 _ Input Timer 1
    iti2 _ Input Timer 2
    iti3 _ Input Timer 3

    # used by ADStand to hold the timer for all 3 layers
    # also used to do the countdown timer
    ti _ Countdown Timer
    ti1 _ Layer 1 Timer
    ti2 _ Layer 2 Timer
    ti3 _ Layer 3 Timer

    # Holds all player states
    # 0 = will be initialized
    # 1 = inside the game as either the spectator or player
    # 2 = inside the round
    pl _ Player List

    # 0 = waiting, during the open/close door phase
    # 1 = round start
    # 2 = during countdown
    # 3 = during round
    # 4 = game stop, announces winner --> 0
    st _ State

    # Holds a bunch of fake names
    dp _ display

    # Used on literally anything for general calculations
    cl _ Calc

""", initials="AD", display="Anvil Drop")

OBJECTIVES["AD"].setdisplay("sidebar")

CONST_INTS.add_consts(5, 20)

TEAMS.new_str("""
. .
    color green
    collisionRule never
    friendlyfire false

d_y . Display Yellow
    color yellow
""", initials="AD", display="Anvil Drop")
)



!mfunc init
    $(floo_event.cmd_init())
    $(OBJECTIVES.cmd_init())
    $(TEAMS.cmd_init())
    join ADd_y Countdown Players Time_Elapsed

    # saves AD_layer and AD_walls
    $(save_layers.fill("redstone_block"))
    $(save_layers.fill("stonebrick"))

    # sets the structure blocks required for running AD_layer and AD_walls
    setblock $(struct_1) structure_block 0 replace {integrity:0.5f,mode:"LOAD",posX:3,posY:-3,posZ:2,name="AD_layer"}
    setblock $(struct_2) structure_block 0 replace {integrity:0.5f,mode:"LOAD",posX:3,posY:-2,posZ:2,name="AD_layer"}
    setblock $(struct_walls) structure_block 0 replace {integrity:1.0f,mode:"LOAD",posX:3,posY:-1,posZ:2,name="AD_walls"}

    summon armor_stand ~ ~ ~ {Tags:["ADEntity","ADStand"],Invulnerable:1,PersistenceRequired:1,Invisible:1,Marker:1,NoGravity:1}
    @e[type=armor_stand,ADStand] ADst = 0

    # sets the default percent values
    # initializes the following fake playernames:
    # &Percent1
    # &Percent2
    # &WallsToggle (0 if off, 1 if on)
    @e[type=armor_stand,ADStand] ADpe1 = 50
    @e[type=armor_stand,ADStand] ADpe2 = 0
    @e[type=armor_stand,ADStand] ADpe3 = 0

    # Sets the default timer values
    # initializes the following fake playernames:
    # &Timer1, &Timer2, &Timer3 (stored as time in ticks)
    # &Seconds1, &Seconds2, &Seconds3 (stored as time in seconds)
    # &Decimal1, &Decimal2, &Decimal3 (stored as time in the decimal places of seconds)
    @e[type=armor_stand,ADStand] ADiti1 = 60
    @e[type=armor_stand,ADStand] ADiti2 = 0
    @e[type=armor_stand,ADStand] ADiti3 = 0
    $(floo_event.cmd_post_init())

!mfunc main
    $(floo_event.cmd_main())

    # General reset
    clear @a[gSA=1] anvil
    kill @e[$(event.select_all),type=item]
    
    # inititializes players
    @a[gSA=1,m=2] ADpl + 0
    @a[gSA=1,ADpl=0,m=2] function reset_player

    # gives instant health for all players not in the round
    # if their health is less than 20
    effect @a[gSA=1,m=2,ADpl=1,gHP=..19] $(Effects.hp) 1 100 true

    # resets players on death
    @a[gDE=1,ADpl=2,m=2] function reset_player

    # resets players in the spectator area
    @a[$(select_spawn),ADpl=2,m=2] function reset_player

    # @e[type=armor_stand,ADStand,ADst=0] function wait_for_start
    @e[type=armor_stand,ADStand,ADst=1] function start_round
    @e[type=armor_stand,ADStand,ADst=2] function countdown
    @e[type=armor_stand,ADStand,ADst=3] function during_round
    @e[type=armor_stand,ADStand,ADst=4] function stop_round

    # Displays the options to the ECs
    @a[gSA=1,EC=0] function display_settings

    # Updates the layer percentage only if it is between 0 and 100 inclusive
    @e[type=armor_stand,ADStand,ADpe1=0..100] function change_percent_1
    @e[type=armor_stand,ADStand,ADpe2=0..100] function change_percent_2
    @e[type=armor_stand,ADStand,ADpe3=0..100] function toggle_walls

    # Updates the timer for each layer only if the time is greater than or equal to 0
    @e[type=armor_stand,ADStand,ADiti1=0..] function change_timer_1
    @e[type=armor_stand,ADStand,ADiti2=0..] function change_timer_2
    @e[type=armor_stand,ADStand,ADiti3=0..] function change_timer_3

    # gives jump boost so they can't jump
    effect @a[gSA=1,m=2,ADpl=2] $(Effects.jump) 2 250 true

!mfunc term
    $(floo_event.cmd_term())

    # fully resets players
    @a[ADpl=0..] function full_reset_player

    $(OBJECTIVES.cmd_term())
    $(TEAMS.cmd_term())
    kill @e[ADEntity]

    # kills all falling anvils
    kill @e[$(select_all),type=falling_block]

    # removes any anvil blocks if they somehow existed
    fill $(select_arena_coords) air 0 replace anvil

    # closes the door
    function close_doors


# !mfunc wait_for_start


# Used on the ADStand to initialize the round
!mfunc start_round
    # sets the countdown time
    @s ADti = $(6 * 20)
    @s ADst = 2

    # adds all players to the round
    @a[$(select_arena),m=2,ADpl=1] function add_to_round

    # ensures the doors are closed
    function close_doors


# Used on the ADStand during the countdown
!mfunc countdown
    @s ADti - 1
    
    # [120], 100, ... 20 as ([6], 5, ... 1)
    # although the timer starts at 120, the following
    # range only outputs commands for 100 and below since the first second is ignored
    $for(num in reversed(range(1, 6)))
    @s[ADti=$(num*20)] tellraw @a $(event.begin(r'{"text":"' + str(num) + '","color":"yellow","bold":"true"}'))
    @s[ADti=$(num*20)] @a playsound $(Sounds.pling) voice @s
    $endfor

    # displays the countdown
    ScOP Countdown ADcl = @s ADti
    ScOP Countdown ADcl /= 20 constants
    Countdown ADcl + 1
    ScOP Countdown AD = Countdown ADcl

    @s[ADti=..0] function end_countdown


# Used on the ADStand once the countdown ends
!mfunc end_countdown
    tellraw @a $(event.begin(r'{"text":"GO!","color":"green","bold":"true"}'))
    Countdown reset AD
    
    @a[gSA=1] playsound entity.experience_orb.touch voice @s

    # sets their scores equal to the timer so they immediately drop the anvils
    ScOP @s ADti1 = &Timer1 ADcl
    ScOP @s ADti2 = &Timer2 ADcl
    ScOP @s ADti3 = &Timer3 ADcl

    @s ADst = 3


# Used on the ADStand during the round
!mfunc during_round
    function calc_anvil_drops

    # displays the time elapsed and player count
    function display


# Used on the ADStand once the round stops
!mfunc stop_round
    Players reset AD
    Time_Elapsed reset AD
    Countdown reset AD

    # announces who won if anyone did
    @a[gSA=1,ADpl=2] function announce_player

    # resets the player to heal
    @a[gSA=1] function reset_player

    # kills all falling anvils
    kill @e[$(select_all),type=falling_block]

    # resets the state
    @s ADst = 0

    # closes the door
    function close_doors


# Used on players to announce themselves as a winner
!mfunc announce_player
    tellraw @a $(event.begin(r'''{"selector":"@s"},{"text":" has won ","color":"gray"},''' + event.name_text() + r',{"text":"!","color":"gray"}'))


# Used on the ADStand when a change in layer 1 or 2's percent has been detected
# In both cases, a "change" is an input from the EC, regardless of
# whether the percent changed or not.
!mfunc change_percent_1
    $for(percent in range(0, 101))
    @s[ADpe1=$(percent)] blockdata $(struct_1) {integrity:$(percent/100)f}
    $endfor

    ScOP &Percent1 ADcl = @s ADpe1
    @s ADpe1 = -1

!mfunc change_percent_2
    $for(percent in range(0, 101))
    @s[ADpe2=$(percent)] blockdata $(struct_2) {integrity:$(percent/100)f}
    $endfor

    ScOP &Percent2 ADcl = @s ADpe2
    @s ADpe2 = -1


# used on the ADStand to toggle walls
!mfunc toggle_walls
    @s[ADpe3=0] blockdata $(struct_walls) {integrity:0.0f}
    @s[ADpe3=0] &WallsToggle ADcl = 0
    
    @s[ADpe3=1] blockdata $(struct_walls) {integrity:1.0f}
    @s[ADpe3=1] &WallsToggle ADcl = 1

    @s ADpe3 = -1


# Used on the ADStand to change timers 1-3 and update fake player names
$for(num in (1, 2, 3))
!mfunc change_timer_$(num)
    ScOP &Timer$(num) ADcl = @s ADiti$(num)

    # sets the seconds as rounded down
    ScOP &Seconds$(num) ADcl = &Timer$(num) ADcl
    ScOP &Seconds$(num) ADcl /= 20 constants
    
    # sets the decimal place
    ScOP &Decimal$(num) ADcl = &Timer$(num) ADcl
    ScOP &Decimal$(num) ADcl %= 20 constants
    ScOP &Decimal$(num) ADcl *= 5 constants

    # sets the additional as a 0 if the decimal place is 5
    # otherwise, it is reset
    &Additional$(num) reset ADcl
    ScOP @s ADcl = &Decimal$(num) ADcl
    @s[ADcl=5] &Additional$(num) ADcl = 0

    @s ADiti$(num) = -1
$endfor


# Used on the ADStand to calculate when anvils will be dropped
!mfunc calc_anvil_drops
    @s ADti1 + 1
    @s ADti2 + 1
    @s ADti3 + 1
    
    # Sets it equal to the timer
    ScOP @s ADcl = &Timer1 ADcl

    # Sets its own value of ADti1 to be negative
    # so subtracting itself will guarantee it to be a positive
    @s[ADcl=0] ADcl = -1

    # Subracts to calculate the difference
    ScOP @s ADcl -= @s ADti1

    # If the armor stand timer exceeds the given time, it runs the layer
    @s[ADcl=..0] function run_layer_1
    @s[ADcl=..0] ADti1 = 0

    ScOP @s ADcl = &Timer2 ADcl
    @s[ADcl=0] ADcl = -1
    ScOP @s[ADcl=1..] ADcl -= @s ADti2
    @s[ADcl=..0] function run_layer_2
    @s[ADcl=..0] ADti2 = 0

    ScOP @s ADcl = &Timer3 ADcl
    @s[ADcl=0] ADcl = -1
    ScOP @s[ADcl=1..] ADcl -= @s ADti3
    @s[ADcl=..0] function run_walls
    @s[ADcl=..0] ADti3 = 0


# used on the ADStand to display the player count and time
# elapsed on the display main scoreboard
!mfunc display
    Players ADpl = 0
    @a[gSA=1,m=2,ADpl=2] Players ADpl + 1
    ScOP Players AD = Players ADpl
    
    @s ADti + 1
    ScOP Time_Elapsed ADcl = @s ADti
    ScOP Time_Elapsed ADcl /= 20 constants
    ScOP Time_Elapsed AD = Time_Elapsed ADcl


!mfunc run_layer_1
    $(layer_1.setblock("redstone_block"))
    $(layer_1.setblock("stonebrick"))

!mfunc run_layer_2
    $(layer_2.setblock("redstone_block"))
    $(layer_2.setblock("stonebrick"))

!mfunc run_walls
    $(layer_walls.setblock("redstone_block"))
    $(layer_walls.setblock("stonebrick"))


!mfunc reset_player
    clear @s
    $(event.cmd_book("@s[EC=0]"))

    effect @s clear
    effect @s $(Effects.hp) 1 100 true
    xp -1000L @s

    join AD @s
    @s ADpl = 1

!mfunc full_reset_player
    function reset_player
    $(event.cmd_spawn())


# used on players to add the player to the round
!mfunc add_to_round
    function reset_player

    # prevents the players from getting knocked back
    replaceitem entity @s slot.armor.head stained_glass 1 5 {
        ench:[{id:$(Enchants.BIND),lvl:1},{id:$(Enchants.VANISH),lvl:1}],
        AttributeModifiers:[{AttributeName:"generic.knockbackResistance",Name:"anything",Amount:1,Operation:0,UUIDLeast:1,UUIDMost:1,Slot:"head"}]
        }

    # prevents them from dying lol
    # replaceitem entity @s slot.weapon totem_of_undying 1 0

    @s ADpl = 2


# Used arbitrarily to open the doors
!mfunc open_doors
    fill $(door_region) air 0 replace glass 0
    @a playsound $(Sounds.xp) voice @s
    title @a actionbar {"text":"The doors are now open","color":"green"}

# Used arbitrarily to close the doors
!mfunc close_doors
    fill $(door_region) glass 0 replace air 0


!mfunc input_start_round
    @e[type=armor_stand,ADStand] ADst = 1

!mfunc input_reset_round
    @e[type=armor_stand,ADStand] ADst = 4


!mfunc input_open_doors
    function open_doors

!mfunc input_close_doors
    function close_doors


!mfunc input_change_settings
    tellraw @a[EC=0] $(event.begin())
    {"text":"Layer 1: ","color":"gray"},
    {"text":"[%]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the percent in layer 1","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADpe1 #"}
    },
    
    {"text":" ","color":"gray"},
    {"text":"[T]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the timer in layer 1","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADiti1 #"}
    },
    
    {"text":"    Layer 2: ","color":"gray"},
    {"text":"[%]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the percent in layer 2","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADpe2 #"}
    },
    {"text":" ","color":"gray"},
    {"text":"[T]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the timer in layer 2","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADiti2 #"}
    },
    
    {"text":"    Walls : ","color":"gray"},
    {"text":"[+]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Turn on walls","color":"gold"}},
        "clickEvent":{"action":"run_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADpe3 1"}
    },
    {"text":" ","color":"gray"},
    {"text":"[-]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Turn off walls","color":"gold"}},
        "clickEvent":{"action":"run_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADpe3 0"}
    },
    {"text":" ","color":"gray"},
    {"text":"[T]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the timer for the walls","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set @e[type=armor_stand,tag=ADStand] ADiti3 #"}
    }
    ]}


# used on EC players to display the settings
!mfunc display_settings
    title @s actionbar {"text":"","extra":[
        {"text":"Layer 1: [","color":"green"},
            {"score":{"name":"&Seconds1","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":".","color":"yellow","bold":"true"},
            {"score":{"name":"&Additional1","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"score":{"name":"&Decimal1","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":"s","color":"yellow"},
        {"text":", ","color":"green"},
            {"score":{"name":"&Percent1","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":"%","color":"yellow"},

        {"text":"], Layer 2: [","color":"green"},
            {"score":{"name":"&Seconds2","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":".","color":"yellow","bold":"true"},
            {"score":{"name":"&Additional2","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"score":{"name":"&Decimal2","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":"s","color":"yellow"},
        {"text":", ","color":"green"},
            {"score":{"name":"&Percent2","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":"%","color":"yellow"},

        {"text":"], Walls: [","color":"green"},
            {"score":{"name":"&Seconds3","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":".","color":"yellow","bold":"true"},
            {"score":{"name":"&Additional3","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"score":{"name":"&Decimal3","objective":"ADcl"},"color":"yellow","bold":"true"},
            {"text":"s","color":"yellow"},
        {"text":", ","color":"green"},
            {"text":"T/F=","color":"yellow"},
            {"score":{"name":"&WallsToggle","objective":"ADcl"},"color":"yellow","bold":"true"},
            
        {"text":"]","color":"green"}
    ]}


!mfunc book
    replaceitem entity @s slot.weapon.offhand written_book 1 0 {
        title:"$(event.full_name) Book",author:"eGO",pages:["[\"\",
            {\"text\":\"$(event.full_name) Settings\\\n\",\"bold\":true},
            {\"text\":\"\\\n\"},
            
            {\"text\":\"AD: \",\"color\":\"dark_gray\"},
            {\"text\":\"Start\",\"color\":\"dark_green\",
                \"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("init"))\"},
                \"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"Starts the virus map so it can be ran\",\"color\":\"green\"}}
            },
            {\"text\":\" / \",\"color\":\"gray\"},
            {\"text\":\"Stop\\\n\",\"color\":\"red\",
                \"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("term"))\"},
                \"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"Ends the virus map\",\"color\":\"red\"}}
            },
            
            {\"text\":\"Doors: \",\"color\":\"dark_gray\"},
            {\"text\":\"Open\",\"color\":\"dark_green\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_open_doors"))\"}},
            {\"text\":\" / \",\"color\":\"gray\"},
            {\"text\":\"Closed\\\n\",\"color\":\"red\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_close_doors"))\"}},
            
            {\"text\":\"Round: \",\"color\":\"dark_gray\"},
            {\"text\":\"Start\",\"color\":\"dark_green\",
                \"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_start_round"))\"},
                \"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"Starts an individual round\",\"color\":\"dark_green\"}}
            },
            {\"text\":\" / \",\"color\":\"gray\"},
            {\"text\":\"Reset\\\n\",\"color\":\"red\",
                \"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_reset_round"))\"},
                \"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"Stops an individual round\",\"color\":\"gold\"}}
            },
            
            {\"text\":\"(Not working): \",\"color\":\"dark_gray\"},
            {\"text\":\"On\",\"color\":\"dark_green\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_add_jump"))\"}},
            {\"text\":\" / \",\"color\":\"gray\"},
            {\"text\":\"Off\\\n\",\"color\":\"red\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_remove_jump"))\"}},
            
            {\"text\":\"Edit settings: \",\"color\":\"dark_gray\"},
            {\"text\":\"[+]\",\"color\":\"gold\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/$(event.cmd_func("input_change_settings"))\"}}
        ]"
    ]}
