$py(
from lib.floo_network import ANVIL_DROP, FlooEvent
from lib.const_ints import CONST_INTS
from lib.scoreboard import *
from lib.consts import *


event = ANVIL_DROP
floo_event = FlooEvent(event, saturation="false")

select_spawn_coords = Coords("-19 4 85 -12 9 89")
select_spawn = select_spawn_coords.selector()

select_arena_coords = Coords("-33 2 81 -21 7 93")
select_arena = select_arena_coords.selector()


# region coords to be quickly set with redstone and back to stonebrick
# to save the structure blocks for "AD_layer" and "AD_walls"
save_layers = Coords("-57 5 80 -57 4 80")

# Placement of the structure blocks
struct_1 = Coords("-36 15 79")
struct_2 = Coords("-36 14 79")
struct_walls = Coords("-36 13 79")

# Placement of the redstone blocks required to activate
# the structure blocks
layer_1 = Coords("-36 15 80")
layer_2 = Coords("-36 14 80")
layer_walls = Coords("-36 13 80")

door_region = Coords("20 7 88 -20 5 86")
    
OBJECTIVES.new_str("""
    . _ .

    # used by players to input a new percent for layer 1
    # and layer 2 respectively. The default value is -1, and when
    # a value is detected that is greater than -1, then the percent
    # is changed
    pe1 _ Input Layer 1 %
    pe2 _ Input Layer 2 &

    # used by ADStand to hold the timer for all 3 layers
    # also used to do the countdown timer
    ti _ Countdown Timer
    ti1 _ Layer 1 Timer
    ti2 _ Layer 2 Timer
    ti3 _ Layer 3 Timer

    # Holds all player states
    # 0 = will be initialized
    # 1 = inside the game as either the spectator or player
    # 2 = inside the round
    pl _ Player List

    # 0 = waiting, during the open/close door phase
    # 1 = round start
    # 2 = during countdown
    # 3 = during round
    # 4 = game stop, announces winner --> 0
    st _ State

    # Holds a bunch of fake names
    dp _ display

    # cl _ Calc
    # te _ Time Elapsed
    # te2 _ Time Elapsed
    # de deathCount Anvil Drop Deaths
    # pc _ Percent Calc
    # ps _ Percent Set
    # ti _ Timer

""", initials="AD", display="Anvil Drop)

OBJECTIVES["AD"].setdisplay("sidebar")

TEAMS.new_str("""
. .
    color green
    collisionRule never
    friendlyfire false

d_y . Display Yellow
    color yellow

""",
initials="AD", display="Anvil Drop")

)


!mfunc init
    $(OBJECTIVES.cmd_init())
    $(TEAMS.cmd_init())
    join ADd_y Countdown Players Time_Elapsed

    # saves AD_layer and AD_walls
    $(save_layers.fill("redstone_block"))
    $(save_layers.fill("stonebrick"))

    # sets the structure blocks required for running AD_layer and AD_walls
    setblock $(struct_1) structure_block 0 replace {integrity:0.5f,mode:"LOAD",posX:3,posY:-3,posZ:2,name="AD_layer"}
    setblock $(struct_2) structure_block 0 replace {integrity:0.5f,mode:"LOAD",posX:3,posY:-2,posZ:2,name="AD_layer"}
    setblock $(struct_walls) structure_block 0 replace {integrity:1.0f,mode:"LOAD",posX:3,posY:-1,posZ:2,name="AD_walls"}

    summon armor_stand ~ ~ ~ {Tags:["ADEntity","ADStand"],Invulnerable:1,PersistenceRequired:1,Invisible:1,Marker:1,NoGravity:1}

    # sets the default timer and percent values
    @e[type=armor_stand,ADStand] ADpe1 = 50
    @e[type=armor_stand,ADStand] ADpe2 = 0
    function input_remove_walls

!mfunc main
    # General reset
    clear @a[gSA=1] anvil
    kill @e[$(event.select_all),type=item]
    
    # inititializes players
    @a[gSA=1,m=2] ADpl + 0
    @a[gSA=1,ADpl=0,m=2] function reset_player

    # resets players on death
    @a[gDE=1,ADpl=2,m=2] function reset_player

    # @e[type=armor_stand,ADStand,ADst=0] function wait_for_start
    @e[type=armor_stand,ADStand,ADst=1] function start_round
    @e[type=armor_stand,ADStand,ADst=2] function countdown
    @e[type=armor_stand,ADStand,ADst=3] function during_round
    @e[type=armor_stand,ADStand,ADst=4] function stop_round
    

///    Display
    Players ADpl = 0
    @a[$SA$,m=2,ADpl=1] Players ADpl + 1
    ScOP Players AD = Players ADpl
    
    @e[type=armor_stand,ADStand1,ADte>=0] ADte + 1
    @e[type=armor_stand,ADStand1,ADte=20] ADte2 + 1
    @e[type=armor_stand,ADStand1,ADte=20] ADte = 0
    ScOP Time_Elapsed AD = @e[type=armor_stand,ADStand1,ADte>=0] ADte2
    
///    Calculating percent
    @e[type=armor_stand,ADStand] ScOP @e[c=1,r=1,type=armor_stand,ADStand] ADpc = @e[c=1,r=1,type=armor_stand,ADStand] ADpe
    ScOP @e[type=armor_stand,ADStand1] ADpe = Percent1 ADSave
    ScOP @e[type=armor_stand,ADStand2] ADpe = Percent2 ADSave
    ScOP @e[type=armor_stand,ADStand3] ADpe = Walls ADSave
    @e[type=armor_stand,ADStand] ScOP @e[c=1,r=1,type=armor_stand,ADStand] ADpc -= @e[c=1,r=1,type=armor_stand,ADStand] ADpe
    
    @e[type=armor_stand,ADStand,ADpc<=-1] ADps = 1
    @e[type=armor_stand,ADStand,ADpc>=1] ADps = 1
    
///    Jump effect
    Jump ADSave ? 0 0
    COND:
        effect @a[$SA$,m=2,ADpl=1] 8 2 250 true
    
    Jump ADSave ? 1 1
    COND:
        effect @a[$SA$,m=2,ADpl=1] 8 0 0 true

!mfunc term
    $(OBJECTIVES.cmd_term())
    $(TEAMS.cmd_term())
    kill @e[ADEntity]


# !mfunc wait_for_start


!mfunc start_round
    # sets the countdown time
    @s ADti = $(6 * 20)
    @s ADst = 2

!mfunc countdown
    @s ADti - 1
    
    # [120], 100, ... 20 as ([6], 5, ... 1)
    # although the timer starts at 120, the following
    # range only outputs commands for 100 and below since the first second is ignored
    $for(num in reversed(range(1, 6)))
    @s[ADti=$(num*20)] tellraw @a $(event.begin(r'{"text":"' + str(num) + '","color":"yellow","bold":"true"}'))
    @s[ADti=$(num*20)] @a playsound $(Sounds.pling) voice @s
    $endfor

    # displays the countdown
    ScOP Countdown ADcl = @s ADti
    ScOP Countdown ADcl %= 20 constants

    @s[ADti=..0] function end_countdown


!mfunc end_countdown
    tellraw @a $(event.begin(r'{"text":"GO!","color":"green","bold":"true"}'))
    
    @e[type=armor_stand,ADStand1] ADte + 0
    @e[type=armor_stand,ADStand1] ADte2 + 0
    Countdown reset AD
    
    @a[gSA=1] playsound entity.experience_orb.touch voice @s

    kill @s


!mfunc during_round
    @s[ADpe1=0..] function change_layer_1_percent
    @s[ADpe2=0..] function change_layer_2_percent
    function calc_time


!mfunc stop_round
    

# Used on the ADStand to calculate when anvils will be dropped
!mfunc calc_time
    @s ADti1 + 1
    @s ADti2 + 1
    @s ADti3 + 1
    
    ScOP @s ADcl = &Timer1 ADcl
    ScOP @s ADcl -= @s ADti1
    @s[ADcl=..0] function run_layer_1
    @s[ADcl=..0] ADti1 = 0

    ScOP @s ADcl = &Timer2 ADcl
    ScOP @s ADcl -= @s ADti2
    @s[ADcl=..0] function run_layer_2
    @s[ADcl=..0] ADti2 = 0

    ScOP @s ADcl = &Timer3 ADcl
    ScOP @s ADcl -= @s ADti3
    @s[ADcl=..0] function run_walls
    @s[ADcl=..0] ADti3 = 0


!mfunc run_layer_1
    $(layer_1.setblock("redstone_block"))
    $(layer_1.setblock("stonebrick"))

!mfunc run_layer_2
    $(layer_2.setblock("redstone_block"))
    $(layer_2.setblock("stonebrick"))

!mfunc run_walls
    $(layer_walls.setblock("redstone_block"))
    $(layer_walls.setblock("stonebrick"))


!mfunc reset_player
    clear @s
    $(event.cmd_book("@s[EC=0]"))

    effect @s clear
    effect @s $(Effects.hp) 1 100 true
    xp -1000L @s

    join AD @s
    @s ADpl = 1

!mfunc full_reset_player
    function reset_player
    $(event.cmd_spawn())


# used on players to add the player to the round
!mfunc add_to_round
    function reset_player

    # prevents the players from getting knocked back
    replaceitem entity @s slot.armor.head stained_glass 1 5 {
        ench:[{id:$(Enchants.BIND),lvl:1},{id:$(Enchants.VANISH),lvl:1}],
        AttributeModifiers:[{AttributeName:"generic.knockbackResistance",Name:"anything",Amount:1,Operation:0,UUIDLeast:1,UUIDMost:1,Slot:"head"}]
        }

    # prevents them from dying lol
    # replaceitem entity @s slot.weapon totem_of_undying 1 0


# Used on the ADStand when a change in layer 1 or 2's percent has been detected
# In both cases, a "change" is an input from the EC, regardless of
# whether the percent changed or not
!mfunc change_layer_1_percent
    $for(percent in range(0, 101)):
    @s[ADpe1=$(percent)] blockdata $(struct_1) {integrity:$(percent/100)f}
    $endfor

    ScOP &Percent1 ADcl = @s ADpe1
    @s ADpe1 = -1

!mfunc change_layer_2_percent
    $for(percent in range(0, 101)):
    @s[ADpe2=$(percent)] blockdata $(struct_2) {integrity:$(percent/100)f}
    $endfor

    ScOP &Percent2 ADcl = @s ADpe2
    @s ADpe2 = -1


# used on the ADStand to turn on walls
!mfunc add_walls
    blockdata $(struct_walls) {integrity:1.0f}
    &WallsToggle ADcl = 1

# used on the ADStand to turn off walls
!mfunc remove_walls
    blockdata $(struct_walls) {integrity:0.0f}
    &WallsToggle ADcl = 0
    

# Used as input to turn on walls
!mfunc input_add_walls
    @e[type=armor_stand,ADStand] function add_walls

# Used as input to turn off walls
!mfunc input_remove_walls
    @e[type=armor_stand,ADStand] function remove_walls


!mfunc input_open_doors
    fill $(door_region) air 0 replace glass 0
    title @a actionbar {"text":"The doors are now open","color":"green"}

!mfunc input_close_doors
    fill $(door_region) glass 0 replace air 0


//<Change Settings
FUNC {Func_ChangeSettings}:
/*
    tellraw @a[EC=0] $TextStart$
    {"text":"Layer 1: ","color":"gray"},
    {"text":"[%]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the percent in layer 1","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set Percent1 ADSave #"}
    },
    
    {"text":" ","color":"gray"},
    {"text":"[T]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the timer in layer 1","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set Timer1 ADSave #"}
    },
    
    {"text":"    Layer 2: ","color":"gray"},
    {"text":"[%]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the percent in layer 2","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set Percent2 ADSave #"}
    },
    {"text":" ","color":"gray"},
    {"text":"[T]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the timer in layer 2","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set Timer2 ADSave #"}
    },
    
    {"text":"    Walls : ","color":"gray"},
    {"text":"[+]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Turn on walls","color":"gold"}},
        "clickEvent":{"action":"run_command","value":"/scoreboard players set Walls ADSave 1"}
    },
    {"text":" ","color":"gray"},
    {"text":"[-]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Turn off walls","color":"gold"}},
        "clickEvent":{"action":"run_command","value":"/scoreboard players set Walls ADSave 0"}
    },
    {"text":" ","color":"gray"},
    {"text":"[T]","color":"gold",
        "hoverEvent":{"action":"show_text","value":{"text":"Edit the timer for the walls","color":"gold"}},
        "clickEvent":{"action":"suggest_command","value":"/scoreboard players set Timer3 ADSave #"}
    }
    ]}
*/
//>


//<General Scoreboard Clock
FUNC {Func_GeneralScoreboardClock}:
///    General Players
    clear @a[$SA$] anvil
    kill @e[$SA$,type=Item]
    
    @a[m=2,ADpl=1,ADde>=1] ADpl = 2
    @a[$SP$,m=2,ADpl=1] ADpl = 2
    clear @a[$SP$,m=2,ADpl=2]
    @a[m=2,ADpl=2,EC=0] SPbk = $SPid$
    @a[ADde>=1] ADde = 0
    @a[ADpl=2] ADpl = 3
    J> NoPVP @a[$SA$,m=2,team=!NoPVP,ADpl=3]
    
///    Display
    Players ADpl = 0
    @a[$SA$,m=2,ADpl=1] Players ADpl + 1
    ScOP Players AD = Players ADpl
    
    @e[type=armor_stand,ADStand1,ADte>=0] ADte + 1
    @e[type=armor_stand,ADStand1,ADte=20] ADte2 + 1
    @e[type=armor_stand,ADStand1,ADte=20] ADte = 0
    ScOP Time_Elapsed AD = @e[type=armor_stand,ADStand1,ADte>=0] ADte2
    
///    Calculating percent
    @e[type=armor_stand,ADStand] ScOP @e[c=1,r=1,type=armor_stand,ADStand] ADpc = @e[c=1,r=1,type=armor_stand,ADStand] ADpe
    ScOP @e[type=armor_stand,ADStand1] ADpe = Percent1 ADSave
    ScOP @e[type=armor_stand,ADStand2] ADpe = Percent2 ADSave
    ScOP @e[type=armor_stand,ADStand3] ADpe = Walls ADSave
    @e[type=armor_stand,ADStand] ScOP @e[c=1,r=1,type=armor_stand,ADStand] ADpc -= @e[c=1,r=1,type=armor_stand,ADStand] ADpe
    
    @e[type=armor_stand,ADStand,ADpc<=-1] ADps = 1
    @e[type=armor_stand,ADStand,ADpc>=1] ADps = 1
    
///    Calculating anvil timers
    @e[type=armor_stand,ADStand,ADti>=0] ADti + 1
    ScOP @e[type=armor_stand,ADStand1,ADti>=0] ADcl = Timer1 ADSave
    ScOP @e[type=armor_stand,ADStand2,ADti>=0] ADcl = Timer2 ADSave
    ScOP @e[type=armor_stand,ADStand3,ADti>=0] ADcl = Timer3 ADSave
    @e[type=armor_stand,ADStand,ADcl=0] ADti = 0
    @e[type=armor_stand,ADStand,ADti>=0] ScOP @e[c=1,r=1,type=armor_stand,ADStand,ADti>=0] ADcl -= @e[c=1,r=1,type=armor_stand,ADStand,ADti>=0] ADti
    
    @e[type=armor_stand,ADStand1,ADti>=1,ADpe>=1,ADcl<=0] setblock $RBlock1$ redstone_block 0
    @e[type=armor_stand,ADStand2,ADti>=1,ADpe>=1,ADcl<=0] setblock $RBlock2$ redstone_block 0
    @e[type=armor_stand,ADStand3,ADti>=1,ADpe>=1,ADcl<=0] setblock $RBlock3$ redstone_block 0
    @e[type=armor_stand,ADStand,ADti>=1,ADcl<=0] ADti = 0
    
///    Jump effect
    Jump ADSave ? 0 0
    COND:
        effect @a[$SA$,m=2,ADpl=1] 8 2 250 true
    
    Jump ADSave ? 1 1
    COND:
        effect @a[$SA$,m=2,ADpl=1] 8 0 0 true
//>

//<General Scoreboard End
FUNC {Func_GeneralScoreboardEnd}:
    CCU.objectiveRemove(Obj_GeneralScoreboardStart)
    CCU.teamRemove(Team_GeneralScoreboardStart)
    
    clear @a[$SA$,m=2]
    @a[$SA$,m=2] SPbk = $SPid$
    
    kill @e[ADEntity]
    kill @e[$SA$,type=FallingSand]
    fill $ArenaFill$ air 0
    effect @a[$SA$] 6 1 100 true
//>


//<Groups
GROUP {Grp_MainStart}:
    CCU.spawnStandStart()
    CCU_Deactivate(GSELF)
    Func_GeneralScoreboardStart()
    CCU_Activate(Grp_MainClock)
    CCU.tfActivate(Grp_ChangePercentTFClock1)
    CCU.tfActivate(Grp_ChangePercentTFClock2)
    CCU.tfActivate(Grp_ChangePercentTFClock3)
    CCU.tfActivate(Grp_CountdownTFClock)
    CCU_Activate(Grp_CloseDoors)
    CCU_FinalSpawnStand

GROUP {Grp_MainClock}:
    CCU.spawnIDSetting()
    Func_GeneralScoreboardClock()

GROUP {Grp_MainEnd}:
    CCU.spawnStandEnd()
    CCU_Deactivate(GSELF)
    Func_GeneralScoreboardEnd()
    CCU_Deactivate(Grp_MainClock)
    CCU.tfDeactivate(Grp_ChangePercentTFClock1)
    CCU.tfDeactivate(Grp_ChangePercentTFClock2)
    CCU.tfDeactivate(Grp_ChangePercentTFClock3)
    CCU.tfDeactivate(Grp_CountdownTFClock)

GROUP {Grp_CountdownTFClock}:
    Func_CountdownTFClock()

LOOP {1 3 + 1}:
    GROUP {CLOCK Grp_ChangePercentTFClock|0|}:
        Func_ChangePercentTFClock|0|()

GROUP {Grp_OpenDoors}:
    CCU_Deactivate(GSELF)
    Func_OpenDoors()

GROUP {Grp_CloseDoors}:
    CCU_Deactivate(GSELF)
    Func_CloseDoors()

GROUP {Grp_ResetSettings}:
    CCU_Deactivate(GSELF)
    Func_ResetSettings()

GROUP {Grp_ChangeSettings}:
    CCU_Deactivate(GSELF)
    Func_ChangeSettings()

CCU.cmdSave()
//>




















